<?xml version="1.0" encoding="UTF-8"?>

<project name="YuiTaskLib">

    <echo level="info">Starting Build For ${component}</echo>

    <echo level="info">Ant Properties</echo>
    <echo level="info">    Home : ${ant.home}</echo>
    <echo level="info">    Ant Version : ${ant.version}</echo>
    <echo level="info">    Build File : ${ant.file}</echo>
    <echo level="info">Local Build Properties</echo>
    <echo level="info">    srcdir : ${srcdir}</echo>
    <echo level="info">    builddir : ${builddir}</echo>
    <echo level="info">    component : ${component}</echo>
    <echo level="info">    component.basefilename : ${component.basefilename}</echo>
    <echo level="info">    component.basedir : ${component.basedir}</echo>
    <echo level="info">    component.srcdir : ${component.srcdir}</echo>
    <echo level="info">    component.builddir : ${component.builddir}</echo>
    <echo level="info">Global Build Properties</echo>
    <echo level="info">    global.build.base : ${global.build.base}</echo>
    <echo level="info">    global.build.component : ${global.build.component}</echo>
    <echo level="info">    global.build.component.assets : ${global.build.component.assets}</echo>
    <echo level="info">    global.src.base : ${global.src.base}</echo>
    <echo level="info">    global.src.component : ${global.src.component}</echo>

    <import file="${builddir}/macrolib.xml" description="Macrodef definitions - jslint, jsmin, registerversion" />

    <target name="all" depends="local, deploy" description="Build and Deploy to Global Build Directory" />
    <target name="local" depends="clean, core, debug, customlocal, skinsbuild, jslint" description="Build and Deploy to Local Build Directory" />
    <target name="core" depends="corebuild, jsmin" description="Core Build" />
    <target name="debug" depends="debugbuild" description="Debug Build" />

    <target name="init">
        <tstamp/>
        <mkdir dir="${component.builddir}" />
    </target>

    <target name="clean" description="Clean Local Build Directory (not 2.x/build)" unless="skip.clean">
       <delete dir="${component.builddir}" />
    </target>

    <!-- CORE -->
    <target name="corebuild" depends="init, -concatcore, -loggerregex, -registercore" description="Create component.js">
        <fixcrlf srcdir="${component.builddir}" includes="${component.basefilename}.js" eol="${buildfiles.eol}" />
    </target>

    <target name="-registercore" unless="skip.registerversion">
        <registerversion classname="${component.mainclass}" module="${component.module}" file="${component.builddir}/${component.basefilename}.js" />
    </target>

    <target name="-concatcore">
        <concatsource destfile="${component.builddir}/${component.basefilename}.js" sourcedir="${component.jsfiles.base}" sourcefiles="${component.jsfiles}" />
    </target>

    <target name="-loggerregex" if="component.logger.regex">
        <echo level="info">Replacing Logger Statements in ${component.builddir}/${component.basefilename}.js</echo>
        <replaceregexp file="${component.builddir}/${component.basefilename}.js"
                            byline="${component.logger.regex.byline}"
                            match="${component.logger.regex}"
                            replace="${component.logger.regex.replace}"
                            flags="${component.logger.regex.flags}" />
    </target>
    
    <!-- DEBUG -->
    <target name="debugbuild" depends="init, -concatdebug, -registerdebug" description="Create component-debug.js">
        <fixcrlf srcdir="${component.builddir}" includes="${component.basefilename}-debug.js" eol="${buildfiles.eol}" />
    </target>

    <target name="-concatdebug">
        <concatsource destfile="${component.builddir}/${component.basefilename}-debug.js" sourcedir="${component.jsfiles.base}" sourcefiles="${component.jsfiles}" />
    </target>

    <target name="-registerdebug" unless="skip.registerversion">
        <registerversion classname="${component.mainclass}" module="${component.module}" file="${component.builddir}/${component.basefilename}-debug.js" />
    </target>

    <!-- MIN -->
    <target name="jsmin" description="Create component-min.js from component.js">
        <!--<jsmin dir="${component.builddir}" file="${component.basefilename}.js" />-->
		<yuicompress dir="${component.builddir}" file="${component.basefilename}.js" args="${yuicompressor.args}" />
    </target>

    <target name="jslint" description="Run jslint over the local build files (default settings)" unless="skip.jslint">
        <jslint>
            <jsfiles>
                <fileset dir="${component.builddir}" includes="*.js" />
            </jsfiles>
        </jslint>
    </target>

    <!-- SKINS -->
    <target name="skinsbuild" depends="init, -concatskins" description="Create skin rollup in local component build directory" if="component.skins.base">
        <fixcrlf srcdir="${component.builddir}/assets/skins/sam" includes="${component}.css" eol="${buildfiles.eol}" />
    </target>

    <target name="-concatskins" if="component.skins.base">
        <concatsource destfile="${component.builddir}/assets/skins/sam/${component}.css" sourcedir="${component.skins.base}" sourcefiles="${component}-core.css, skins/sam/${component}-skin.css" />
        <cssmin dir="${component.builddir}/assets/skins/sam" file="${component}.css" />
    </target>

    <!-- DEPLOY -->
    <target name="deploy" description="Move files to 2.x/build, 2.x/src" depends="customassets, -copyassets, -copyskins, examples, readme, deploysrc">
        <copy todir="${global.build.component}" preservelastmodified="true">
            <fileset dir="${component.builddir}" includes="*.js" />
        </copy>
    </target>

    <target name="-copyassets" if="component.assetfiles">
        <copy todir="${global.build.component.assets}" flatten="true" preservelastmodified="true">
            <fileset dir="${component.srcdir}" includes="${component.assetfiles}"  />
        </copy>
    </target>

    <target name="-copyskins" if="component.skins.base">
        <copy todir="${global.build.component.assets}/skins/sam" preservelastmodified="true">
            <fileset dir="${component.builddir}/assets/skins/sam" includes="${component}.css"  />
        </copy>

        <copy todir="${global.build.component.assets}/skins/sam" preservelastmodified="true">
            <fileset dir="${component.skins.base}/skins/sam" includes="${component}-skin.css"  />
        </copy>

        <copy todir="${global.build.component.assets}" preservelastmodified="true">
            <fileset dir="${component.skins.base}" includes="${component}-core.css"  />
        </copy>

        <copy todir="${global.build.component.assets}/skins/sam" preservelastmodified="true">
            <fileset dir="${component.skins.base}/skins/sam" includes="${component.skins.imgfiles}"  />
        </copy>
    </target>

    <target name="deploysrc">
        <copy todir="${global.src.component}" preservelastmodified="true">
            <fileset dir="${component.jsfiles.base}" includes="${component.jsfiles}" />
        </copy>
    </target>

    <target name="readme" if="readme.exists">
        <copy file="${component.basedir}/README" todir="${global.build.component}" preservelastmodified="true" /> 
    </target>

    <!-- Stub, to be over-ridden by components, since everyone seems to have their own way of building examples -->
    <target name="examples">
    <!--
        For most components, this maybe as simple copying files or running PHP commandline as an external call
        but need to figure out what to do with the Calendar/Container example setup 
    -->
    </target>

    <!-- Stub, to be over-ridden by components if the need custom work in local (e.g. container builds container_core using this) -->
    <target name="customlocal" />

       <!-- Stub, to be over-ridden by components if the need custom work in assets (e.g. concatenation of css files). Called before assets are copied -->
    <target name="customassets" />

</project>
