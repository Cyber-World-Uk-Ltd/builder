<?xml version="1.0" encoding="UTF-8"?>

<project name="YuiMacroLib">

    <macrodef name="arrayliteral">
        <attribute name="from" />
        <attribute name="to" />
        <attribute name="key" />
        <sequential>
            <if>
                <and>
                    <isset property="@{from}" />
                    <length string="${@{from}}" when="ne" length="0" />
                </and>
                <then>
                    <propertyregex property="array"
                                   override="true"
                                   input="${@{from}}"
                                   casesensitive="false"
                                   regexp="([^\,\s]+)"
                                   replace="'\1'"
                                    />

                    <property name="@{to}" value="@{key}:[${array}]" />
                </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="createdetails">
        <sequential>
            <arrayliteral from="component.use" to="component.details.use" key="use" />
            <arrayliteral from="component.supersedes" to="component.details.supersedes" key="supersedes" />
            <arrayliteral from="component.requires" to="component.details.requires" key="requires" />
            <arrayliteral from="component.optional" to="component.details.optional" key="optional" />
        	<arrayliteral from="component.lang" to="component.details.lang" key="lang" />
            <if>
                <isset property="component.skinnable" />
                <then>
                    <property name="component.details.skinnable" value="skinnable:${component.skinnable}" />
                </then>
            </if>

            <propertyselector property="details.list"
                             delimiter=","
                             match="component\.details.([^\.]*)"
                             select="\1"
                             casesensitive="false" />

            <var name="details" value="" />
            <if>
                <isset property="details.list" />
                <then>
                    <for list="${details.list}" param="val">
                        <sequential>
                            <var name="details" value="${component.details.@{val}}, ${details}" />
                        </sequential>
                    </for>
                    <propertyregex property="component.details.hash"
                      input="{${details}}"
                      regexp="(\,\s*?\})"
                      replace="}"
                      casesensitive="false" />
                </then>
                <else>
                    <property name="component.details.hash" value="" />
                </else>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="yuicompress">
        <attribute name="src" />
        <attribute name="dest" />
        <attribute name="args" />

        <sequential>
            <echo level="info">Running yuicompressor on @{src}</echo>
            <java jar="${yuicompressor.jar}" fork="true" failonerror="true">
                <arg line="@{args} -o" />
                <arg file="@{dest}" />
                <arg file="@{src}" />
            </java>
        </sequential>
    </macrodef>

    <macrodef name="concatsource">
        <attribute name="destfile" />
        <attribute name="sourcedir" />
        <attribute name="sourcefiles" />
        <attribute name="workingdir" default="${workingdir}" />

        <element name="filters" optional="true" description="Additonal filters to apply to individual files"/>

        <sequential>
            <echo level="info">Concatenating</echo>
            <echo level="info">    Source Files : @{sourcefiles}</echo>
            <echo level="info">    In Source Dir : @{sourcedir}</echo>
            <echo level="info">    To : @{destfile}</echo>

            <delete dir="@{workingdir}" quiet="true"/>
            <copy todir="@{workingdir}">
                <filelist dir="@{sourcedir}" files="@{sourcefiles}" />
                <filterchain>
                    <filters />
                    <fixcrlf fixlast="true" eof="remove"/>
                </filterchain>
            </copy>

            <concat destfile="@{destfile}" fixlastline="true">
                <filelist dir="@{workingdir}" files="@{sourcefiles}" />
            </concat>

            <delete dir="${workingdir}" quiet="true" />
        </sequential>
    </macrodef>

    <macrodef name="jslint">
        <element name="jsfiles" optional="false" />
        <sequential>
            <!-- 
               Need to find a way to convert fileset to args (script?) to 
               avoid ' ', which will break for files with ' in them
               
               Evaluates to the following java execution line...
               java -r js.jar jslintconsole.js 'file1.js' 'file2.js' 'file3.js'
            -->
            <pathconvert pathsep="' '" property="jsfileargs">
                <jsfiles />
            </pathconvert>

            <java jar="${rhino.jar}" fork="true" failonerror="true">
                <arg file="${jslintconsole.js}" />
                <arg value="${jslintsrc.js}" />
                <arg line="'${jsfileargs}'" />
            </java>

        </sequential>
    </macrodef>

    <macrodef name="registerversion">
        <attribute name="module" />
        <attribute name="classname" />
        <attribute name="file" />
        <sequential>
            <loadfile srcfile="${builddir}/files/versioncode.txt" property="@{module}-@{classname}-version" >
                <filterchain>
                    <replacetokens>
                        <token key="MODULE" value="@{module}"/>
                        <token key="CLASSNAME" value="@{classname}"/>
                    </replacetokens>
                </filterchain>
            </loadfile>
            <echo level="info">Adding Version Registration Code to @{file}</echo>
            <concat destfile="@{file}" append="true" fixlastline="true">${@{module}-@{classname}-version}</concat>
        </sequential>
    </macrodef>

    <macrodef name="addlang">

        <attribute name="dir" />
        <attribute name="module" />
        <attribute name="dest" />
        <attribute name="lang" default="" />
    	<attribute name="details" default = ""/>

        <sequential>
            <if>
                <equals arg1="@{details}" arg2="" />
                <then>
                    <property name="@{module}@{lang}_details" value="" />
                </then>
                <else>
                    <property name="@{module}@{lang}_details" value=",@{details}" />
                </else>
            </if>

            <if>
                <equals arg1="@{lang}" arg2="" />
                <then>
                    <property name="@{module}@{lang}_fullname" value="@{module}" />
                </then>
                <else>
                    <property name="@{module}@{lang}_fullname" value="@{module}_@{lang}" />
                </else>
            </if>

            <loadfile srcfile="@{dir}/${@{module}@{lang}_fullname}.js" property="@{module}@{lang}-strs-loaded" />

            <echo level="info">Wrapping @{dir}/${@{module}@{lang}_strs} in YUI.add, Y.Intl.add</echo>

            <copy file="${builddir}/files/langtemplate.txt" tofile="@{dest}/${@{module}@{lang}_fullname}.js" overwrite="true">
                <filterset>
                	<filter token="LANG" value="@{lang}" />
                	<filter token="LANG_MODULE" value="lang/${@{module}@{lang}_fullname}" />
                    <filter token="STRINGS" value="${@{module}@{lang}-strs-loaded}" />
                    <filter token="YUIVAR" value="${yui.variable}" />
                    <filter token="MODULE" value="@{module}" />
                    <filter token="LANG_DETAILS" value="${@{module}@{lang}_details}" />
                </filterset>
            </copy>
        </sequential>

    </macrodef>
	
    <macrodef name="addmodule">
        <attribute name="file" />
        <attribute name="module" />
        <attribute name="details" default="" />

        <sequential>
            <if>
                <equals arg1="@{details}" arg2="" />
                <then>
                    <property name="@{module}-details" value="" />
                </then>
                <else>
                    <property name="@{module}-details" value=",@{details}" />
                </else>
            </if>
            <loadfile srcfile="@{file}" property="@{module}-@{file}-code" />
            <echo level="info">Wrapping @{file} in YUI.add module</echo>
            <copy file="${builddir}/files/moduletemplate.txt" tofile="@{file}" overwrite="true">
                <filterset>
                    <filter token="CODE" value="${@{module}-@{file}-code}" />
                    <filter token="YUIVAR" value="${yui.variable}" />
                    <filter token="MODULE" value="@{module}" />
                    <filter token="DETAILS" value="${@{module}-details}" />
                </filterset>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="addrollup">
        <attribute name="file" />
        <attribute name="module" />
        <attribute name="details" default="" />

        <sequential>
            <if>
                <equals arg1="@{details}" arg2="" />
                <then>
                    <property name="@{module}-details" value="" />
                </then>
                <else>
                    <property name="@{module}-details" value=",@{details}" />
                </else>
            </if>
            <loadfile srcfile="@{file}" property="@{module}-@{file}-code" />
            <echo level="info">Adding Rollup @{file} using YUI.add</echo>
            <copy file="${builddir}/files/rolluptemplate.txt" tofile="@{file}" overwrite="true">
                <filterset>
                    <filter token="CODE" value="${@{module}-@{file}-code}"/>
                    <filter token="YUIVAR" value="${yui.variable}" />
                    <filter token="MODULE" value="@{module}"/>
                    <filter token="DETAILS" value="${@{module}-details}"/>
                </filterset>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="addlangrollup">

    	<attribute name="module" />
        <attribute name="dir" />

        <sequential>
            <echo level="info">Registering rollup info for lang files in @{dir} using YUI.add</echo>

        	<for list="${component.rollup.lang}" param="lang" trim="true">
                <sequential>
                    <loadfile srcfile="@{dir}/@{module}_@{lang}.js" property="@{module}-@{lang}-code" />

                    <var name="lang.use" value="{use:[" />

                    <for list="${component.lang.use}" param="submod" trim="true">                   
                       <sequential>
                             <var name="lang.use" value="${lang.use}'lang/@{submod}_@{lang}'," />
                       </sequential>
                    </for>

                	<var name="lang.use" value="${lang.use}]}" />

                    <propertyregex property="@{module}-@{lang}-details"
                      input="${lang.use}"
                      regexp="(\,\s*?\])"
                      replace="]"
                      casesensitive="false" />

                    <copy file="${builddir}/files/rolluptemplate.txt" tofile="@{dir}/@{module}_@{lang}.js" overwrite="true">
                        <filterset>
                            <filter token="CODE" value="${@{module}-@{lang}-code}"/>
                            <filter token="YUIVAR" value="${yui.variable}" />
                            <filter token="MODULE" value="lang/@{module}_@{lang}"/>
                            <filter token="DETAILS" value=", ${@{module}-@{lang}-details}"/>
                        </filterset>
                    </copy>
        		</sequential>
        	</for>

            <loadfile srcfile="@{dir}/@{module}.js" property="@{module}--code" />

            <var name="lang.use" value="{use:[" />
            <for list="${component.lang.use}" param="submod" trim="true">                   
               <sequential>
                     <var name="lang.use" value="${lang.use}'lang/@{submod}'," />
               </sequential>
            </for>
            <var name="lang.use" value="${lang.use}]}" />

            <propertyregex property="@{module}--details"
              input="${lang.use}"
              regexp="(\,\s*?\])"
              replace="]"
              casesensitive="false" />

            <copy file="${builddir}/files/rolluptemplate.txt" tofile="@{dir}/@{module}.js" overwrite="true">
                <filterset>
                    <filter token="CODE" value="${@{module}--code}"/>
                    <filter token="YUIVAR" value="${yui.variable}" />
                    <filter token="MODULE" value="lang/@{module}"/>
                    <filter token="DETAILS" value=", ${@{module}--details}"/>
                </filterset>
            </copy>

        </sequential>
    </macrodef>
	
</project>
