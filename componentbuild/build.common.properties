##########################################################################
# Common Build Properties
#
# This file contains the most common set of properties  which you probably need to configure to get a build up and going
# Use it along with build.common.xml as a starting point to customize your build process.
#
# See build.example.properties and build.example.xml for the complete list of configurable variables
#  
##########################################################################

component=foobarwidget
component.module=${component}
component.mainclass=YAHOO.widget.FooBar
# Uncomment the following line if your component is in beta. The built files will be named accordingly [ component-beta.js, component-beta-min.js etc.]
# component.releasetype=beta

component.basedir=${srcdir}/widget/${component}
component.builddir=${component.basedir}/build
component.srcdir=${component.basedir}/src

component.jsfiles.base=${component.srcdir}/js
component.jsfiles=FooBarWidget.js, FooBarUtils.js, renderer/FooBarWidgetRenderer.js

# You can delete this line, if you have no assets to deploy
component.assetfiles=img/*, css/*

# You can delete these 2 lines if you have no logger statements to strip
# Backslashes need to be escaped (using double-blackslash) in order to parse correctly as properties. If included in the XML, backslashes do not need escaping

# IMPORTANT!!: 
#	- Log statements need to end in semi-colons, otherwise the default regex will strip out code until the next semi-colon is hit.
#	- Any code on the same line as the start or end of a Log statement will be stripped. Hence Log statments should be on their own lines. 
component.logger.regex=^.*?(?:logger|YAHOO.log).*?(?:;|\\).*;|(?:\\r?\\n.*?)*?\\).*;).*;?.*?\\r?\\n
component.logger.regex.byline=false

buildfiles.eol=lf
