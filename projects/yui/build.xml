<project name="yui" default="all">
    <!--
    This is the master build for yui.  It generates rollup files, the API docs, the 
    zip distribution, and the files that go to akamai and makeover. 

    Requires ant 1.6.5+
    Requires ant-contrib tasks: http://ant-contrib.sourceforge.net/
    -->

    <property name="builddir" value="/Users/adamoore/dev/yahoo/presentation/tools/builder/componentbuild" />
    <property name="yuicompressor.jar" value="/Users/adamoore/dev/yahoo/presentation/tools/builder/componentbuild/lib/yuicompressor/yuicompressor-2.1.2.jar" />

    <import file="${builddir}/macrolib.xml" description="Macrodef definitions - jslint, jsmin, registerversion" />

    <property name="cvs.root" value="vault.yahoo.com:/CVSROOT" />
    <property name="cvs.rsh" value="yssh" />

    <property name="basedir" location="."/>

    <property name="build" location="${basedir}/target"/>
    <property name="yui" location="${build}/yui"/>
    <property name="examplesdist" location="${basedir}/examples_dist"/>
    <property name="examplesydn" location="${basedir}/examples_ydn"/>
    <property name="src" location="${basedir}/yahoo/presentation/2.x"/>
    <property name="verify" location="${basedir}/verify"/>
    <property name="tmp" location="${basedir}/tmp"/>
    <loadfile property="version.internal" srcFile="${basedir}/version.internal.txt">
        <filterchain>
            <striplinebreaks/>
        </filterchain>
    </loadfile>
    <property name="akamai" location="${build}/akamai/${version.internal}"/>
    <property name="makeover" location="${build}/makeover/${version.internal}"/>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath>
        <pathelement location="lib/ant-contrib-1.0b3.jar"/>
      </classpath>
    </taskdef>

    <target name="all" depends="test,compile, package, verify, akamai, makeover"/>

    <target name="compile">

        <!-- label property ex: build.78 ... strip "build." for YAHOO.register -->
        <!-- 20070416, changed - label property ex: yui.78 ... strip "yui." for YAHOO.register -->
        <propertyregex property="version.build"
              input="${label}"
              regexp="yui\.(.*)"
              replace="\1"
              casesensitive="false" 
              defaultValue="" />

        <!-- clean up build dir and recreate -->
        <delete dir="${build}"/>
        <delete dir="${tmp}"/>
        <delete dir="${examplesdist}"/>
        <delete dir="${examplesydn}"/>
        <mkdir dir="${build}"/>
        <mkdir dir="${tmp}"/>
        <mkdir dir="${akamai}"/>
        <mkdir dir="${makeover}"/>

        <!-- create yahoo-dom-event.js -->
        <concat destfile="${src}/build/yahoo-dom-event/yahoo-dom-event.js">
            <filelist dir="${src}/build" 
                      files="yahoo/yahoo-min.js,dom/dom-min.js,event/event-min.js"/>
        </concat>

        <registerversion classname="YAHOO" module="yahoo-dom-event" 
                file="${src}/build/yahoo-dom-event/yahoo-dom-event.js" />

        <!-- create utilities.js -->
        <concat destfile="${src}/build/utilities/utilities.js">
            <filelist dir="${src}/build" 
                      files="yahoo/yahoo-min.js,dom/dom-min.js,event/event-min.js,connection/connection-min.js,animation/animation-min.js,dragdrop/dragdrop-min.js,element/element-beta-min.js"/>
        </concat>

        <registerversion classname="YAHOO" module="utilities" 
                file="${src}/build/utilities/utilities.js" />

        <!-- copy global README ... @todo extract latest release notes from all components -->
        <copy file="${src}/README" tofile="${yui}/README" preservelastmodified="true" />


        <!-- copy everything in build except the js/css files -->
        <copy todir="${yui}/build"  preservelastmodified="true">
            <fileset dir="${src}/build">
                <exclude name="**/*.js"/>
                <exclude name="**/*.css"/>
            </fileset>
        </copy>


        <!-- copy skins -->
        <!-- TODO, one task for all skins 
        <copy todir="${yui}/build/assets/skins" preservelastmodified="true" flatten="true">
            <fileset dir="${yui}/build">
                <include name="**/assets/skins/**"/>
            </fileset>
        </copy>
        -->

        
        <copy todir="${tmp}/build/assets/skins/sam" preservelastmodified="true" flatten="true">
            <fileset dir="${src}/build">
                <include name="**/assets/skins/sam/*" />
                <exclude name="**/assets/skins/sam/*-skin.css" />
            </fileset>
        </copy>

        <concat destfile="${tmp}/build/assets/skins/sam/skin.css">
            <fileset dir="${tmp}/build/assets/skins/sam">
                <include name="*.css" />
            </fileset>
        </concat>

        <replace dir="${tmp}/build/assets/skins/sam" value="">
            <include name="**/*.css"/>
            <replacefilter token="../../../../../build/assets/skins/sam/" />
            <replacefilter token="../../../../assets/skins/sam/" />
        </replace>

        <copy todir="${yui}/build/assets/skins/sam" preservelastmodified="true" flatten="true">
            <fileset dir="${tmp}/build/assets/skins/sam">
                <include name="*" />
                <exclude name="*.css" />
            </fileset>
        </copy>

        <copy todir="${yui}/build/assets/skins/sam" preservelastmodified="true" flatten="true">
            <fileset dir="${tmp}/build/assets/skins/sam">
                <include name="*.css" />
            </fileset>
            <filterchain>
                <concatfilter prepend="copyright.txt"/>
                <replacetokens>
                    <token key="VERSION" value="${version.internal}"/>
                    <token key="BUILD" value="${version.build}"/>
                </replacetokens>
            </filterchain>
        </copy>

        
        <!-- copy build js/css files, updating version token and prepending the copyright info 
             do NOT preservelastmodified because the file is being modified with the current
             build number
        -->
        <copy todir="${yui}/build">
            <fileset dir="${src}/build">
                <include name="**/*.js"/>
                <include name="**/*.css"/>
            </fileset>
            <filterchain>
                <concatfilter prepend="copyright.txt"/>
                <replacetokens>
                    <token key="VERSION" value="${version.internal}"/>
                    <token key="BUILD" value="${version.build}"/>
                </replacetokens>
            </filterchain>
        </copy>

        <!-- Generate docs and copy to the yui zip dir -->
        <exec dir="." executable="./caboodle.sh" outputproperty="docgen.output" />
        <copy todir="${yui}/docs" preservelastmodified="true">
            <fileset dir="${tmp}/docs" />
        </copy>

        <!-- copy the cheat sheets too -->
        <copy todir="${yui}/docs/assets" preservelastmodified="true">
            <fileset dir="${src}/docs/assets">
                <include name="**/*.zip"/>
            </fileset>
        </copy>


        <!-- generate the ydn specific docs -->
        <exec dir="." executable="./caboodle.sh" outputproperty="docgen.output" >
            <arg value="-y" />
        </exec>
        <copy todir="${build}/ydn/docs" preservelastmodified="true">
            <fileset dir="${tmp}/docs" />
        </copy>

        <!-- copy the cheat sheets too -->
        <copy todir="${build}/ydn/docs/assets" preservelastmodified="true">
            <fileset dir="${src}/docs/assets">
                <include name="**/*.zip"/>
            </fileset>
        </copy>

        <exec dir="." executable="./examples.sh" output="examples_dist.log" />
        <copy todir="${yui}" preservelastmodified="true">
            <fileset dir="${examplesdist}/"/>
        </copy>

        <exec dir="." executable="./examples.sh" output="examples_ydn.log">
            <arg value="-y" />
            <arg value="true" />
            <arg value="-d" />
            <arg value="examples_ydn" />
            <arg value="-b" />
            <arg value="true" />
        </exec>
        <copy todir="${build}/ydn/examples" preservelastmodified="true">
            <fileset dir="${examplesydn}/"/>
        </copy>

        <!-- copy tests -->
        <copy todir="${yui}/tests" preservelastmodified="true">
            <fileset dir="${src}/tests"/>
        </copy>

    </target>

    <!-- @todo run tests -->
    <target name="test">

    <!--
	<java jar="lib/crosscheck.jar" fork="true" failonerror="true" maxmemory="128m" >
         <arg value="-h"/>
         <classpath>
           <pathelement location="lib/crosscheck.jar"/>
           <pathelement path="${java.class.path}"/>
         </classpath>
	 <arg value="tests" />
       </java>
     -->

    </target>

    <!-- zip up everything in the build directory -->
    <target name="package" depends="compile">
        <zip destfile="${build}/yui_${version.internal}.zip" 
		basedir="${build}" 
		includes="yui/**" />
        <checksum file="${build}/yui_${version.internal}.zip" />

        <!-- ydn examples -->
        <zip destfile="${build}/ydn_${version.internal}.zip" basedir="${build}/ydn/examples" />

    </target>


    <target name="akamai" depends="compile">
        <!-- copy only the build files that belong on akamai -->
        <copy todir="${akamai}/build">
            <fileset dir="${yui}/build">
              <patternset id="just.min">
                <include name="**/*-min.js"/>
                <include name="**/*-min.css"/>
                <include name="**/utilities*"/>
                <include name="**/yahoo-dom-event*"/>
                <include name="**/reset-fonts-grids*"/>
                <include name="**/assets/**"/>
              </patternset>
            </fileset>
        </copy>

        <!-- deal with makefiles? -->

        <!-- generate script to make all of the subdirs -->

        <copy file="push_all.py" tofile="${build}/akamai/${version.internal}/push_all.py" preservelastmodified="true" />

        <zip destfile="${build}/akamai_${version.internal}.zip" basedir="${build}/akamai" />

    </target>

    <target name="makeover" depends="compile">
        <copy todir="${makeover}/build">
            <fileset dir="${yui}/build"/>
        </copy>

        <zip destfile="${build}/makeover_${version.internal}.zip" basedir="${build}/makeover" />


    </target>

    <target name="verify" depends="compile">
        <!-- copy build verification files -->
        <copy todir="${build}/verify" preservelastmodified="true">
            <fileset dir="${verify}"/>
        </copy>
        <copy file="${basedir}/PHP_ENABLED_LINK.html" tofile="${build}/PHP_ENABLED_LINK.html" preservelastmodified="true" />
    </target>

    <target name="updatecvs">

        <!-- periods are not allowed in cvs labels -->

        <propertyregex property="label.scrubbed"
              input="${label}"
              regexp="yui\.(.*)"
              replace="yui\1"
              casesensitive="false" 
              defaultValue="" />

        <!-- committing these files to this location will cause another
             build to happen unless I specifically itemize all of the
             directories I want to monitor.  Added ignoreFiles in
             config.xml that will hopefully take care of this -->

        <echo message="Build successful, committing rollups" />

        <cvs cvsroot="${cvs.root}" cvsrsh="${cvs.rsh}" dest=".">
            <commandline>
                <argument value="commit"/>
                <argument value="-m"/>
                <argument value="${label.scrubbed}"/>
                <argument value="yahoo/presentation/2.x/build/utilities"/>
                <argument value="yahoo/presentation/2.x/build/yahoo-dom-event"/>
                <argument value="yahoo/presentation/2.x/build/assets/skins/sam"/>
            </commandline>
        </cvs>

        <echo message="labeling cvs" />
        <cvs cvsroot="${cvs.root}" cvsrsh="${cvs.rsh}" dest=".">
            <commandline>
                <argument value="tag"/>
                <argument value="${label.scrubbed}"/>
                <argument value="yahoo/presentation/2.x"/>
                <argument value="yahoo/presentation/templates"/>
                <argument value="yahoo/presentation/tools"/>
            </commandline>
        </cvs>
    </target>

    <target name="recompress">

        <foreach list="animation,autocomplete,calendar,connection,container,dom,dragdrop,event,logger,menu,slider,tabview,treeview,yahoo"
                 param="mod" target="compressnormal" />

        <foreach list="button,colorpicker,datasource,datatable,element,editor,history,yuiloader,yuitest" 
                 param="mod" target="compressbeta" />

        <foreach list="imageloader"
                 param="mod" target="compressexperimental" />

        <echo>compressing container core</echo>
           <yuicompress dir="${src}/build/container" file="container_core.js"
                        args="--warn --preserve-semi --line-break 6000" />
    </target>

    <target name="compressnormal">
        <echo>compressing ${mod}</echo>
           <yuicompress dir="${src}/build/${mod}" file="${mod}.js"
                        args="--warn --preserve-semi --line-break 6000" />
    </target>

    <target name="compressbeta">
        <echo>compressing ${mod}</echo>
           <yuicompress dir="${src}/build/${mod}" file="${mod}-beta.js"
                        args="--warn --preserve-semi --line-break 6000" />
    </target>

    <target name="compressexperimental">
        <echo>compressing ${mod}</echo>
           <yuicompress dir="${src}/build/${mod}" file="${mod}-experimental.js"
                        args="--warn --preserve-semi --line-break 6000" />
    </target>

</project>
